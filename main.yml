---
- name: Update SSL certificate on GWEFA appliances
  hosts: all
  become: true
  become_user: exadmn
  tasks:
    - name: "Create required directories in /etc/letsencrypt2"
      become: true
      become_user: root
      file:
        path: "/etc/letsencrypt2/{{ item }}"
        state: directory
        owner: root
        group: root
        mode: 0711
      with_items:
        - account
        - certs
        - csrs
        - keys

    - name: "Generate a Let's Encrypt account key"
      shell: "if [ ! -f {{ letsencrypt_account_key }} ]; then openssl genrsa 4096 | sudo tee {{ letsencrypt_account_key }}; fi"

    - name: "Generate Let's Encrypt private key"
      shell: "openssl genrsa 4096 | sudo tee /etc/letsencrypt2/keys/{{ domain_name }}.key"

    - name: "Create temporary OpenSSL config with SAN"
      become: true
      become_user: root
      copy:
        content: |
          [ req ]
          default_bits       = 2048
          distinguished_name = req_distinguished_name
          req_extensions     = req_ext
          prompt             = no

          [ req_distinguished_name ]
          CN = {{ domain_name }}

          [ req_ext ]
          subjectAltName = @alt_names

          [ alt_names ]
          DNS.1 = {{ domain_name }}
          DNS.2 = www.{{ domain_name }}
        dest: /tmp/openssl-{{ domain_name }}.cnf
        mode: "0644"

    - name: "Generate Let's Encrypt CSR"
      become: true
      become_user: root
      shell: "openssl req -new -sha256 -key /etc/letsencrypt2/keys/{{ domain_name }}.key -config /tmp/openssl-{{ domain_name }}.cnf -out /etc/letsencrypt2/csrs/{{ domain_name }}.csr"
      args:
        executable: /bin/bash

    - name: "Remove temporary OpenSSL config"
      become: true
      become_user: root
      file:
        path: /tmp/openssl-{{ domain_name }}.cnf
        state: absent

    - name: "Begin Let's Encrypt challenges"
      become: true
      become_user: root
      acme_certificate:
        acme_directory: "{{ acme_directory }}"
        acme_version: "{{ acme_version }}"
        account_key_src: "{{ letsencrypt_account_key }}"
        account_email: "{{ acme_email }}"
        terms_agreed: 1
        challenge: "{{ acme_challenge_type }}"
        csr: "{{ letsencrypt_csrs_dir }}/{{ domain_name }}.csr"
        dest: "{{ letsencrypt_certs_dir }}/{{ domain_name }}.crt"
        fullchain_dest: "{{ letsencrypt_certs_dir }}/fullchain_{{ domain_name }}.crt"
        remaining_days: 91
      register: acme_challenge_your_domain

    - name: "Create .well-known/acme-challenge directory"
      become: true
      become_user: root
      file:
        path: /var/www/html/.well-known/acme-challenge
        state: directory
        owner: root
        group: root
        mode: 0755

    - name: "Implement http-01 challenge files"
      become: true
      become_user: root
      copy:
        content: "{{ acme_challenge_your_domain['challenge_data'][item]['http-01']['resource_value'] }}"
        dest: "/var/www/html/{{ acme_challenge_your_domain['challenge_data'][item]['http-01']['resource'] }}"
        owner: root
        group: root
        mode: 0644
      with_items:
        - "{{ domain_name }}"
        - "www.{{ domain_name }}"

    - name: Stop iptables service
      service:
        name: iptables
        state: stopped

    - name: "Complete Let's Encrypt challenges"
      acme_certificate:
        acme_directory: "{{ acme_directory }}"
        acme_version: "{{ acme_version }}"
        account_key_src: "{{ letsencrypt_account_key }}"
        account_email: "{{ acme_email }}"
        challenge: "{{ acme_challenge_type }}"
        csr: "{{ letsencrypt_csrs_dir }}/{{ domain_name }}.csr"
        dest: "{{ letsencrypt_certs_dir }}/{{ domain_name }}.crt"
        chain_dest: "{{ letsencrypt_certs_dir }}/chain_{{ domain_name }}.crt"
        fullchain_dest: "{{ letsencrypt_certs_dir }}/fullchain_{{ domain_name }}"
        data: "{{ acme_challenge_your_domain }}"

    - name: Start iptables service
      service:
        name: iptables
        state: started
